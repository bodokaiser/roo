#!/usr/bin/env node

/**
 * Modules
 */

var Roo = require('../');
var open = require('open');
var assert = require('assert');
var glob = require('glob').sync;
var stat = require('fs').statSync;
var resolve = require('path').resolve;
var extname = require('path').extname;
var basename = require('path').basename;
var Command = require('commander').Command;

/**
 * Production
 */

var production = 'production' == process.env.NODE_ENV;

/**
 * Terminal
 */

var isatty = !! process.stdin.isTTY;

/**
 * Templates
 */

var templates = ['html', 'jade', 'mu', 'swig', 'ejs'];
var rtemplate = new RegExp('.(' + templates.join('|') + ')', 'i');

/**
 * Program
 */

var program = new Command('roo')
  .version(require('../package.json').version)
  .usage('[options] [dir]')
  .option('-a, --auth <user>:<pass>', 'specify basic auth credentials')
  .option('-p, --port <port>', 'specify the port [process.env.PORT]', Number)
  .option('-f, --favicon <path>', 'serve the given favicon')
  .option('-d, --duo <path|glob>', 'set a path or glob for duo')
  .option('-i, --index', 'set the entry point for "/" [index.*]')
  .option('-s, --static <dir>', 'set a static path ["."]')
  .option('-c, --cors', 'allows cross origin access serving')
  .option('-e  --exec <cmd>', 'execute command on each request')
  .option('    --no-dirs', 'disable directory rendering')
  .option('    --no-compress', 'disable compression')
  .parse(process.argv);

// initialize
var root = resolve(program.args.shift() || '.');
assert(stat(root).isDirectory(), root + ': is not a directory');

var base = basename(root);
var roo = Roo(root);

// basic auth
if (program.auth) {
  var user = program.auth.split(':')[0];
  var pass = program.auth.split(':')[1];
  if (!user || !pass) throw new Error('user and pass required');
  roo.auth(user, pass);
}

// exec
program.exec && roo.exec(program.exec);

// compress
production && program.compress && roo.compress();

// duo
!production && program.duo && roo.duo(program.duo);

// index entry "/"
if (program.index) {
  roo.get('/', program.index);
} else {
  var files = glob('{' + base + ',index}.*', { cwd: root });
  var index = files.filter(function(file) {
    return rtemplate.test(extname(file));
  }).shift();
  index && roo.get('/', index);
}

// static
if (program.static) {
  var statics = program.static.split(/\s*,\s*/);
  statics.map(roo.static.bind(roo));
} else {
  roo.static(root);
}

// directory
!production && program.dirs && roo.directory();

// listen
var port = program.port || process.env.PORT;

roo.listen(port, function() {
  console.log('Listening on port %s', this.address().port);
  !production && isatty && open('http://localhost:' + this.address().port);
})
